#!/usr/bin/env node
const lnService = require('ln-service');
const { routeFromChannels } = require('bolt07');
const util = require('util');
const fs = require('fs');
const lnd = require('./lnd')
const commandConstants = require('./commands/constants');
const { option } = require('yargs');
const { json } = require('body-parser');
const { ignitionParameters } = commandConstants;
const { keys, values } = Object;
const { toCamelCase } = require("./tool");
const { camelCase } = require('lodash');
const tool = require("./tool")
const importLazy = require('import-lazy')(require);
const { version } = importLazy('./package');
const prog = require('caporal');



//Format Parameters
let key = keys(ignitionParameters);
let value = values(ignitionParameters)

for (let i in key) {
  key[i] = camelCase(key[i]);
}
const ignitionParametersCamelCase = key.reduce((obj, key, index) => ({ ...obj, [key]: value[index] }), {});







prog
  .version(version)
  .command('ignite', 'Ignite the ROF (Rebalance Lightning Channels)')
  .argument("[pubkeys...]", "provide pubkeys in the ROF order separated by comma or newline, your node does not need to be first")
  .option("--max-fee-sats <max-fee-sats>", "maxfees in sats willing to pay for the rebalance", prog.INTEGER, ignitionParametersCamelCase.maxFeeSats)
  .option("--amount-rebalance <amount-reblance>", "amount to rebalance", prog.STRING, ignitionParametersCamelCase.amountRebalance )
  .option("-z, --zero-fees", "Force Zero fees")
  .option("-l, --ln-dir <ln-dir>", "Path to lnd directory", prog.STRING, ignitionParametersCamelCase.lnDir)
  .option('--dry-run <dryrun>', "Dummy Payment is sent to simulate the ROF Igntion")
  .option('--pubkey-file <pubkey-file>', "When no pubkeys are provide specify a pubkey-file Path")
  .action((args, options, logger)  => {
  
    return new Promise(async (resolve, reject) => {
      try {
        const table = 'rows';
        return tool.igniteChannels({
          pubkey_file: args.pubkeyFile,
          is_zerofee: !!options.zeroFees,
          lnd: (await lnd.authenticatedLnd({ logger, lnDir:  options.lnDir })).lnd,
          amountReblance: options.amountRebalance,
          lnDir : options.lnDir,
          maxFeeSats : options.maxFeeSats,
          pubkeys : args.pubkeys,
          dryrun : options.dryRun,
          logger: logger
        },
          tool.returnObject({ logger, reject, resolve }));
      } catch (err) {

        return reject(err);
      }
    })
  })



  .command('status', 'Status of Channels of the ROF (whether opened or not)')
  .argument("[pubkeys...]", "provide pubkeys in the ROF order separated by comma or newline, your node does not need to be first")
  .option('--pubkey-file <pubkey-file>', "When no pubkeys are provide specify a pubkey-file Path")
  .option("-l, --ln-dir <ln-dir>", "Path to lnd directory")
  .action((args, options, logger)  => {
    return new Promise(async (resolve, reject) => {
      try {
        const table = 'rows';
        return tool.statusChannels({
          pubkey_file: args.pubkeyFile,
          lnd: (await lnd.authenticatedLnd({ logger, lnDir:  options.lnDir })).lnd,
          lnDir : options.lnDir,
          pubkeys : args.pubkeys,
          logger: logger
        },
          tool.returnObject({ logger, reject, resolve, table }));
      } catch (err) {

        return reject(err);
      }
    })
  })

  



prog.parse(process.argv);

